The 2-matrix_divided.py module
===============================

"""
This module defines a matrix division function 'matrix_divided(matrix, div)'.

Ussage: 'matrix_divided(...) returns a copy of matrix with all elements divided by 'div.
"""

Test Cases
==========

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

>>> matrix = [[2, 4, 6],[9, 12, 15]]
>>> print(matrix_divided(matrix, 2))
[[1.0, 2.0, 3.0], [4.5, 6.0, 7.5]]

The original matrix is unchanged

>>> print(matrix)
[[2, 4, 6], [9, 12, 15]]

Function can also handle floating-point numbers.
NB: rounded to a maximum of two decimal places.

>>> matrix = [[2.2, 4.0, 6.1],[9.25, 12.3, 15.2]]
>>> print(matrix_divided(matrix, 3))
[[0.73, 1.33, 2.03], [3.08, 4.1, 5.07]]

Matrix must be a list of lists of integers/floats, else function raises a TypeError

>>> matrix = [['a', 'b', 'c'],[4, 5, 6]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Function raises TypeError if matrix rows arent equal

>>> matrix = [[1, 2, 3],[4, 5, 6, 7]]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

Function raises ZeroDivisionError when div is 0

>>> matrix = [[1, 2, 3],[4, 5, 7]]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero

Div must be float or integer

>>> matrix = [[1, 2, 3],[4, 5, 6]]
>>> print(matrix_divided(matrix, "var"))
Traceback (most recent call last):
TypeError: div must be a number

>>> print(matrix_divided(matrix, None))
Traceback (most recent call last):
TypeError: div must be a number

Matrix must be a list of lists

>>> matrix = [1, 2, 3]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

