The 0-add_integer module
============================

""""
This module defines an addition function 'add_integer(a, b=98)'.

Usage: add_integer  returns the addition of two arguments.
"""

Test Cases:
===========

>>> add_integer = __import__('0-add_integer').add_integer
>>> add_integer(2, 4)
6

Function works with negative values:

>>> add_integer(-2, 6)
4

>>> add_integer(-2, -5)
-7

Function works with floating-point values:

>>> add_integer(2.8, 2)
4

>>> add_integer(-2.8, -2)
-4

>>> add_integer(2.8, -2)
0

The second argument is optional; it is 98 by default:

>>> add_integer(0)
98

Non-integers or Floats
======================

'add_integer()' expects integers or float as arguments. A TypeError is raised if any of the arguments is not any of type int or float.

>>> add_integer("RositaJUqueio", 2)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, "Famanda")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None, 3)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, None)
Traceback (most recent call last):
TypeError: b must be an integer

If both arguments are not of the required type int or float, TypeError is printed for the first argument.

>>> add_integer("Hi", "Rosita")
Traceback (most recent call last):
TypeError: a must be an integer

If infinity is provided, the function fails.

>>> add_integer(4, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

Function fails with NaN numbers too:

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

>>> add_integer(int('nan'))
Traceback (most recent call last):
ValueError: invalid literal for int() with base 10: 'nan'
